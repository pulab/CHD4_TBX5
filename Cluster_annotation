#use scType to annotate single cell clusters

# Install scType from GitHub if you haven't already
devtools::install_github("IanevskiAleksandr/sc-type")


library(Seurat)
library(sctype
ElbowPlot(seurat_filtered)
        
# load gene set preparation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R")
# load cell type annotation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R")
        # DB file
        
        gs_list <- gene_sets_prepare(db_, tissue)
        
        seurat_package_v5 <- isFALSE('counts' %in% names(attributes(seurat_filtered[["RNA"]])));
        print(sprintf("Seurat object %s is used", ifelse(seurat_package_v5, "v5", "v4")))
        
        scRNAseqData_scaled <- if (seurat_package_v5) as.matrix(seurat_filtered[["RNA"]]$scale.data) else as.matrix(seurat_filtered[["RNA"]]@scale.data)
        
        es.max <- sctype_score(scRNAseqData = scRNAseqData_scaled, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
        
       
        
        # merge by cluster
        cL_resutls <- do.call("rbind", lapply(unique(seurat_filtered@meta.data$seurat_clusters), function(cl){
          es.max.cl = sort(rowSums(es.max[ ,rownames(seurat_filtered@meta.data[seurat_filtered@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
          head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(seurat_filtered@meta.data$seurat_clusters==cl)), 10)
        }))
        sctype_scores <- cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)  
        
        # set low-confident (low ScType score) clusters to "unknown"
        sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] <- "Unknown"
        print(sctype_scores[,1:3], n=30)
        
        seurat_filtered@meta.data$sctype_classification = ""
        for(j in unique(sctype_scores$cluster)){
          cl_type = sctype_scores[sctype_scores$cluster==j,]; 
          seurat_filtered@meta.data$sctype_classification[seurat_filtered@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
        }
        
        DimPlot(seurat_filtered, reduction = "wnn.umap", label = TRUE, repel = TRUE, group.by = 'sctype_classification')        
        
        
        # load libraries
        lapply(c("ggraph","igraph","tidyverse", "data.tree"), library, character.only = T)
        
        # prepare edges
        cL_resutls <- cL_resutls[order(cL_resutls$cluster),]; edges = cL_resutls; edges$type = paste0(edges$type,"_",edges$cluster); edges$cluster = paste0("cluster ", edges$cluster); edges = edges[,c("cluster", "type")]; colnames(edges) = c("from", "to"); rownames(edges) <- NULL
        
        # prepare nodes
        nodes_lvl1 <- sctype_scores[,c("cluster", "ncells")]; nodes_lvl1$cluster = paste0("cluster ", nodes_lvl1$cluster); nodes_lvl1$Colour = "#f1f1ef"; nodes_lvl1$ord = 1; nodes_lvl1$realname = nodes_lvl1$cluster; nodes_lvl1 = as.data.frame(nodes_lvl1); nodes_lvl2 = c(); 
        ccolss <- c("#5f75ae","#92bbb8","#64a841","#e5486e","#de8e06","#eccf5a","#b5aa0f","#e4b680","#7ba39d","#b15928","#ffff99", "#6a3d9a","#cab2d6","#ff7f00","#fdbf6f","#e31a1c","#fb9a99","#33a02c","#b2df8a","#1f78b4","#a6cee3", "#795fae", "#ae5f5f","#9e6f6f","#e3c481")
        for (i in 1:length(unique(cL_resutls$cluster))){
          dt_tmp = cL_resutls[cL_resutls$cluster == unique(cL_resutls$cluster)[i], ]; nodes_lvl2 = rbind(nodes_lvl2, data.frame(cluster = paste0(dt_tmp$type,"_",dt_tmp$cluster), ncells = dt_tmp$scores, Colour = ccolss[i], ord = 2, realname = dt_tmp$type))
        }
        nodes <- rbind(nodes_lvl1, nodes_lvl2); nodes$ncells[nodes$ncells<1] = 1;
        files_db <- openxlsx::read.xlsx(db_)[,c("cellName","shortName")]; files_db = unique(files_db); nodes = merge(nodes, files_db, all.x = T, all.y = F, by.x = "realname", by.y = "cellName", sort = F)
        nodes$shortName[is.na(nodes$shortName)] = nodes$realname[is.na(nodes$shortName)]; nodes = nodes[,c("cluster", "ncells", "Colour", "ord", "shortName", "realname")]
        
        mygraph <- graph_from_data_frame(edges, vertices=nodes)
        
        # Make the graph
        gggr <- ggraph(mygraph, layout = 'circlepack', weight=I(ncells)) + 
          geom_node_circle(aes(filter=ord==1,fill=I("#F5F5F5"), colour=I("#D3D3D3")), alpha=0.9) + geom_node_circle(aes(filter=ord==2,fill=I(Colour), colour=I("#D3D3D3")), alpha=0.9) +
          theme_void() + geom_node_text(aes(filter=ord==2, label=shortName, colour=I("#ffffff"), fill="white", repel = !1, parse = T, size = I(log(ncells,25)*1.5)))+ geom_node_label(aes(filter=ord==1,  label=shortName, colour=I("#000000"), size = I(3), fill="white", parse = T), repel = !0, segment.linetype="dotted")
        
        DimPlot(seurat_filtered, reduction = "wnn.umap", label = TRUE, repel = TRUE, cols = ccolss)+ gggr
        
        

        mapping_table <- data.frame(
          seurat_clusters = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24),
          cell_state = c(
            "Fibroblast_1", "Macrophage_1", "Fibroblast_2", "aCM_1", "Endocardium_1", 
            "Macrophage_2", "aCM_2", "Macrophage_3", "Endocardium_2", "Epicardium_1", 
            "Endocardium_3", "Epicardium_2", "T_cells", "Vascular_endothelium", "B_cells", 
            "aCM_3", "Fibroblast_3", "aCM_4", "Macrophage_4", "Myeloid_other", 
            "Pericyte", "aCM_5", "epicardium_doublet?", "Adipose", "Neuron"
          )
        )
        
        cluster_to_cell_state <- setNames(mapping_table$cell_state, mapping_table$seurat_clusters)
        
        cell_state_vector <- cluster_to_cell_state[as.character(seurat_filtered$seurat_clusters)]
        
        length(cell_state_vector) == nrow(seurat_filtered@meta.data)
        
        seurat_filtered@meta.data$cell_state <- cell_state_vector
        
        head(seurat_filtered@meta.data)
        
        DimPlot(seurat_filtered, group.by = "cell_state", reduction = "wnn.umap")
        
        
        saveRDS(seurat_filtered, file = "/Users/masonsweat/Desktop/NGS_analysis/CHD4_TBX5/multiome/QC_obj/combined_nodoublets_removeepicardialdoublets", ascii = FALSE, version = NULL,
                compress = TRUE, refhook = NULL)
        
        setwd('~/Desktop/NGS_analysis/CHD4_TBX5/multiome/multiome_figures/QC_figures')
        # Count the number of cells for each cell state in the 'cell_state' metadata column
        cell_state_counts <- table(seurat_filtered@meta.data$cell_state)
        
        # Convert it to a data frame 
        cell_state_counts_df <- as.data.frame(cell_state_counts)
        colnames(cell_state_counts_df) <- c("cell_state", "num_cells")
        
        # Display the table
        print(cell_state_counts_df)
        
        # Save CSV
        write.csv(cell_state_counts_df, "cell_state_counts.csv", row.names = FALSE)
